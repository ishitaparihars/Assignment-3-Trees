1) Implement Binary tree
here's an implementation of a binary tree in Python:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, val):
        new_node = TreeNode(val)
        if self.root is None:
            self.root = new_node
        else:
            current = self.root
            while True:
                if val < current.val:
                    if current.left is None:
                        current.left = new_node
                        break
                    else:
                        current = current.left
                else:
                    if current.right is None:
                        current.right = new_node
                        break
                    else:
                        current = current.right

    def search(self, val):
        current = self.root
        while current is not None:
            if val == current.val:
                return True
            elif val < current.val:
                current = current.left
            else:
                current = current.right
        return False

    def inorder(self, node):
        if node is not None:
            self.inorder(node.left)
            print(node.val, end=" ")
            self.inorder(node.right)

    def preorder(self, node):
        if node is not None:
            print(node.val, end=" ")
            self.preorder(node.left)
            self.preorder(node.right)

    def postorder(self, node):
        if node is not None:
            self.postorder(node.left)
            self.postorder(node.right)
            print(node.val, end=" ")


2) Find height of a given tree
To find the height of a given tree, you can use a recursive algorithm to traverse the tree and keep track of the maximum depth from the root node to a leaf node. Here's an implementation of this algorithm in Python:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def height(node):
    if node is None:
        return 0
    left_height = height(node.left)
    right_height = height(node.right)
    return max(left_height, right_height) + 1


3) Perform Pre-order, Post-order, In-order traversal
here's an implementation of pre-order, in-order, and post-order traversals for a binary tree in Python using a TreeNode class and a BinaryTree class:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def preorder(self, node):
        if node is None:
            return
        print(node.val, end=" ")
        self.preorder(node.left)
        self.preorder(node.right)

    def inorder(self, node):
        if node is None:
            return
        self.inorder(node.left)
        print(node.val, end=" ")
        self.inorder(node.right)

    def postorder(self, node):
        if node is None:
            return
        self.postorder(node.left)
        self.postorder(node.right)
        print(node.val, end=" ")
# Create a binary tree
tree = BinaryTree()
tree.root = TreeNode(1)
tree.root.left = TreeNode(2)
tree.root.right = TreeNode(3)
tree.root.left.left = TreeNode(4)
tree.root.left.right = TreeNode(5)

# Perform pre-order traversal
print("Pre-order traversal:")
tree.preorder(tree.root)

# Perform in-order traversal
print("\nIn-order traversal:")
tree.inorder(tree.root)

# Perform post-order traversal
print("\nPost-order traversal:")
tree.postorder(tree.root)


4) Function to print all the leaves in a given binary tree
 here's an implementation of a function to print all the leaves in a given binary tree in Python using a TreeNode class and a BinaryTree class:
 class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def print_leaves(self, node):
        if node is None:
            return
        if node.left is None and node.right is None:
            print(node.val, end=" ")
        self.print_leaves(node.left)
        self.print_leaves(node.right)
# Create a binary tree
tree = BinaryTree()
tree.root = TreeNode(1)
tree.root.left = TreeNode(2)
tree.root.right = TreeNode(3)
tree.root.left.left = TreeNode(4)
tree.root.left.right = TreeNode(5)
tree.root.right.left = TreeNode(6)
tree.root.right.right = TreeNode(7)

# Print all the leaves
print("Leaves of the binary tree:")
tree.print_leaves(tree.root)


5) Implement BFS (Breath First Search) and DFS (Depth First Search)
here's an implementation of BFS and DFS algorithms for a binary tree in Python using a TreeNode class and a BinaryTree class:
from collections import deque

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def bfs(self):
        if self.root is None:
            return
        queue = deque([self.root])
        while queue:
            node = queue.popleft()
            print(node.val, end=" ")
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

    def dfs_preorder(self, node):
        if node is None:
            return
        print(node.val, end=" ")
        self.dfs_preorder(node.left)
        self.dfs_preorder(node.right)

    def dfs_inorder(self, node):
        if node is None:
            return
        self.dfs_inorder(node.left)
        print(node.val, end=" ")
        self.dfs_inorder(node.right)

    def dfs_postorder(self, node):
        if node is None:
            return
        self.dfs_postorder(node.left)
        self.dfs_postorder(node.right)
        print(node.val, end=" ")

# Create a binary tree
tree = BinaryTree()
tree.root = TreeNode(1)
tree.root.left = TreeNode(2)
tree.root.right = TreeNode(3)
tree.root.left.left = TreeNode(4)
tree.root.left.right = TreeNode(5)
tree.root.right.left = TreeNode(6)
tree.root.right.right = TreeNode(7)

# Perform BFS traversal
print("BFS traversal:")
tree.bfs()

# Perform DFS traversals
print("\nDFS pre-order traversal:")
tree.dfs_preorder(tree.root)
print("\nDFS in-order traversal:")
tree.dfs_inorder(tree.root)
print("\nDFS post-order traversal:")
tree.dfs_postorder(tree.root)


6) Find sum of all left leaves in a given Binary Tree
To find the sum of all left leaves in a given binary tree, we can perform a DFS (Depth-First Search) traversal of the tree and keep track of the sum of all the left leaves encountered during the traversal.
Here's an implementation of the sum_left_leaves function in Python:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def sum_left_leaves(root):
    if root is None:
        return 0
    # Initialize sum to 0
    left_sum = 0
    # Check if left child of root is a leaf node
    if root.left and root.left.left is None and root.left.right is None:
        left_sum += root.left.val
    # Traverse left and right subtrees recursively and update left_sum
    left_sum += sum_left_leaves(root.left) + sum_left_leaves(root.right)
    return left_sum
# Create a binary tree
root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20)
root.right.left = TreeNode(15)
root.right.right = TreeNode(7)

# Find sum of all left leaves in the binary tree
left_sum = sum_left_leaves(root)

# Print the sum of all left leaves
print("Sum of all left leaves:", left_sum)


7) Find sum of all nodes of the given perfect binary tree
In a perfect binary tree, all levels are completely filled, and all nodes have either two children or no children. Let's call the sum of all the nodes in a perfect binary tree with height h "S".

To find S, we can use the fact that a perfect binary tree with height h has 2^(h+1)-1 nodes. We can prove this by induction.

Base case: For h=0, the tree consists of only one node, so the formula holds: 2^(0+1)-1 = 1.
Inductive step: Assume that the formula holds for a tree of height h-1. Then a perfect binary tree of height h has one more level than the tree of height h-1, so it has twice as many nodes. Therefore, the total number of nodes in the perfect binary tree of height h is:
2^(h+1)-1 = 2(2^h)-1 = 2^h + (2^h-1)

The sum of all the nodes in a perfect binary tree of height h is equal to the sum of the nodes in its left subtree, plus the sum of the nodes in its right subtree, plus the value of the root node.

The left subtree and right subtree are both perfect binary trees of height h-1, so by the inductive hypothesis, their sum is:

S = 2*S(h-1) + 2^h

where S(h-1) is the sum of the nodes in a perfect binary tree of height h-1.

Solving this equation recursively, we get:

S(h) = 2S(h-1) + 2^h
= 2(2S(h-2) + 2^(h-1)) + 2^h
= 4S(h-2) + 32^h
= 8S(h-3) + 7*2^h
= ...
= (2^(h+1)-1)*h

Therefore, the sum of all the nodes in a perfect binary tree of height h is:

S = (2^(h+1)-1)*h

Note that this formula only holds for perfect binary trees, and not for binary trees in general.


8) Count subtrees that sum up to a given value x in a binary tree
To count the number of subtrees in a binary tree that sum up to a given value x, we can use a recursive approach that traverses the tree in a post-order manner.

At each node, we can compute the sum of all the nodes in its left subtree and the sum of all the nodes in its right subtree. We can then add the value of the current node to these sums to obtain the total sum of the subtree rooted at the current node.

We can then check if this total sum is equal to x. If it is, we increment a counter variable. We then return the total sum of the subtree rooted at the current node to the parent node.

Here's the Python code to implement this approach:
def count_subtrees_with_sum(root, x):
    count = 0

    def postorder(node):
        nonlocal count
        if not node:
            return 0
        left_sum = postorder(node.left)
        right_sum = postorder(node.right)
        total_sum = left_sum + right_sum + node.val
        if total_sum == x:
            count += 1
        return total_sum

    postorder(root)
    return count


9) Find maximum level sum in Binary Tree
To find the maximum level sum in a binary tree, we can traverse the tree level by level and compute the sum of the nodes at each level. We can then keep track of the maximum sum seen so far and the level at which it occurred.

Here's the Python code to implement this approach:
def max_level_sum(root):
    if not root:
        return 0
    queue = [root]
    max_sum = float('-inf')
    max_level = 0
    level = 0
    while queue:
        level += 1
        level_sum = 0
        level_size = len(queue)
        for i in range(level_size):
            node = queue.pop(0)
            level_sum += node.val
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        if level_sum > max_sum:
            max_sum = level_sum
            max_level = level
    return max_level


10) Print the nodes at odd levels of a tree
To print the nodes at odd levels of a tree, we can traverse the tree recursively and keep track of the current level. We can print the node value if the current level is odd, and then recursively call the function for the left and right subtrees with an incremented level.

Here's the Python code to implement this approach:
def print_nodes_at_odd_levels(root, level=1):
    if not root:
        return
    if level % 2 == 1:
        print(root.val)
    print_nodes_at_odd_levels(root.left, level+1)
    print_nodes_at_odd_levels(root.right, level+1)
